main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;input.user_id == return.owner.id;daikon.inv.binary.twoString.StringEqual;(input.user_id, return.owner.id)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;input.name == return.name;daikon.inv.binary.twoString.StringEqual;(input.name, return.name)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;input.description == return.description;daikon.inv.binary.twoString.StringEqual;(input.description, return.description)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;input.public == return.public;daikon.inv.binary.twoScalar.IntEqual;(input.public, return.public)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;input.collaborative == return.collaborative;daikon.inv.binary.twoScalar.IntEqual;(input.collaborative, return.collaborative)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.followers.total == return.tracks.offset;daikon.inv.binary.twoScalar.IntEqual;(return.followers.total, return.tracks.offset)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.followers.total == return.tracks.total;daikon.inv.binary.twoScalar.IntEqual;(return.followers.total, return.tracks.total)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.followers.total == size(return.images[]);daikon.inv.binary.twoScalar.IntEqual;(return.followers.total, size(return.images[..]))
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.followers.total == size(return.images[]);daikon.inv.binary.twoScalar.IntEqual;(return.followers.total, size(return.images[..]))
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.followers.total == size(return.tracks.items[]);daikon.inv.binary.twoScalar.IntEqual;(return.followers.total, size(return.tracks.items[..]))
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.followers.total == size(return.tracks.items[]);daikon.inv.binary.twoScalar.IntEqual;(return.followers.total, size(return.tracks.items[..]))
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;LENGTH(return.external_urls.spotify)==56;daikon.inv.unary.string.FixedLengthString;(return.external_urls.spotify)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.external_urls.spotify is Url;daikon.inv.unary.string.IsUrl;(return.external_urls.spotify)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;LENGTH(return.href)==59;daikon.inv.unary.string.FixedLengthString;(return.href)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.href is Url;daikon.inv.unary.string.IsUrl;(return.href)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;LENGTH(return.id)==22;daikon.inv.unary.string.FixedLengthString;(return.id)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.images[] == [];daikon.inv.unary.sequence.OneOfSequence;(return.images[..])
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.owner.external_urls.spotify is Url;daikon.inv.unary.string.IsUrl;(return.owner.external_urls.spotify)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.owner.followers == null;daikon.inv.unary.scalar.OneOfScalar;(return.owner.followers)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.owner.href is Url;daikon.inv.unary.string.IsUrl;(return.owner.href)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.owner.type == "user";daikon.inv.unary.string.OneOfString;(return.owner.type)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;LENGTH(return.owner.type)==4;daikon.inv.unary.string.FixedLengthString;(return.owner.type)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;LENGTH(return.snapshot_id)==56;daikon.inv.unary.string.FixedLengthString;(return.snapshot_id)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;LENGTH(return.tracks.href)==66;daikon.inv.unary.string.FixedLengthString;(return.tracks.href)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.tracks.href is Url;daikon.inv.unary.string.IsUrl;(return.tracks.href)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.tracks.items[] == [];daikon.inv.unary.sequence.OneOfSequence;(return.tracks.items[..])
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.tracks.limit == 100;daikon.inv.unary.scalar.OneOfScalar;(return.tracks.limit)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.type == "playlist";daikon.inv.unary.string.OneOfString;(return.type)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;LENGTH(return.type)==8;daikon.inv.unary.string.FixedLengthString;(return.type)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;LENGTH(return.uri)==39;daikon.inv.unary.string.FixedLengthString;(return.uri)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;input.user_id is a substring of return.owner.external_urls.spotify;daikon.inv.binary.twoString.StdString$SubString;(input.user_id, return.owner.external_urls.spotify)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;input.user_id is a substring of return.owner.href;daikon.inv.binary.twoString.StdString$SubString;(input.user_id, return.owner.href)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;input.user_id is a substring of return.owner.uri;daikon.inv.binary.twoString.StdString$SubString;(input.user_id, return.owner.uri)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.id is a substring of return.external_urls.spotify;daikon.inv.binary.twoString.StdString$SubString;(return.external_urls.spotify, return.id)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.type is a substring of return.external_urls.spotify;daikon.inv.binary.twoString.StdString$SubString;(return.external_urls.spotify, return.type)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.id is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.id)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.href is a substring of return.tracks.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.tracks.href)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.type is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.type)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.id is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.id, return.uri)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.owner.type is a substring of return.owner.external_urls.spotify;daikon.inv.binary.twoString.StdString$SubString;(return.owner.external_urls.spotify, return.owner.type)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.owner.type is a substring of return.owner.href;daikon.inv.binary.twoString.StdString$SubString;(return.owner.href, return.owner.type)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.owner.type is a substring of return.owner.uri;daikon.inv.binary.twoString.StdString$SubString;(return.owner.type, return.owner.uri)
main.users{user_id}playlists.createPlaylist&201(main.createPlaylist&Input):::EXIT;return.type is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.type, return.uri)
