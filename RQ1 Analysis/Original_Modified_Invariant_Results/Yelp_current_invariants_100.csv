failed to get console mode for stdout: The handle is invalid.
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;size(input.categories[]) == size(input.attributes[]);daikon.inv.binary.twoScalar.IntEqual;(size(input.categories[..]), size(input.attributes[..]))
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;size(input.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.categories[..]))
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;size(input.price[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.price[..]))
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]))
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;input.limit >= size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(input.categories[..]))
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;input.limit > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.attributes[..]))
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;input.offset >= size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.offset, size(input.price[..]))
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;size(input.categories[]) == size(input.attributes[]);daikon.inv.binary.twoScalar.IntEqual;(size(input.categories[..]), size(input.attributes[..]))
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;size(input.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.categories[..]))
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;size(input.price[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.price[..]))
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]))
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;input.limit >= size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(input.categories[..]))
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;input.limit > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.attributes[..]))
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;input.offset >= size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.offset, size(input.price[..]))
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER;size(input.categories[]) == size(input.attributes[]);daikon.inv.binary.twoScalar.IntEqual;(size(input.categories[..]), size(input.attributes[..]))
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER;size(input.price[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.price[..]))
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]))
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER;input.limit >= size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(input.categories[..]))
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER;input.limit > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.attributes[..]))
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER;input.offset >= size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.offset, size(input.price[..]))
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(input.categories[]) == size(input.attributes[]);daikon.inv.binary.twoScalar.IntEqual;(size(input.categories[..]), size(input.attributes[..]))
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;LENGTH(return.id)==22;daikon.inv.unary.string.FixedLengthString;(return.id)
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.is_closed == false;daikon.inv.unary.scalar.OneOfScalar;(return.is_closed)
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.phone is Numeric;daikon.inv.unary.string.IsNumeric;(return.phone)
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.review_count >= 1;daikon.inv.unary.scalar.LowerBound;(return.review_count)
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.url is Url;daikon.inv.unary.string.IsUrl;(return.url)
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.transactions[] elements one of { "delivery", "pickup", "restaurant_reservation" };daikon.inv.unary.stringsequence.EltOneOfString;(return.transactions[..])
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;LENGTH(return.location.country)==2;daikon.inv.unary.string.FixedLengthString;(return.location.country)
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(input.price[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.price[..]))
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]))
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(return.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(return.categories[..]))
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.radius > return.review_count;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, return.review_count)
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.limit >= size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(input.categories[..]))
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.limit > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.attributes[..]))
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.limit >= size(return.transactions[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.transactions[..]))
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.offset >= size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.offset, size(input.price[..]))
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.review_count >= size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.review_count, size(input.attributes[..]))
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.review_count >= size(return.transactions[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.review_count, size(return.transactions[..]))
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(input.categories[]) >= size(return.transactions[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(size(input.categories[..]), size(return.transactions[..]))
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::ENTER;size(input.categories[]) == size(input.attributes[]);daikon.inv.binary.twoScalar.IntEqual;(size(input.categories[..]), size(input.attributes[..]))
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::ENTER;size(input.price[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.price[..]))
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::ENTER;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]))
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::ENTER;input.limit >= size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(input.categories[..]))
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::ENTER;input.limit > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.attributes[..]))
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::ENTER;input.offset >= size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.offset, size(input.price[..]))
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;size(input.categories[]) == size(input.attributes[]);daikon.inv.binary.twoScalar.IntEqual;(size(input.categories[..]), size(input.attributes[..]))
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;return.total >= 0;daikon.inv.unary.scalar.LowerBound;(return.total)
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;size(input.price[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.price[..]))
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]))
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.radius > return.total;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, return.total)
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.limit >= size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(input.categories[..]))
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.limit > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.attributes[..]))
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.limit >= size(return.businesses[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.businesses[..]))
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.offset >= size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.offset, size(input.price[..]))
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;return.total >= size(return.businesses[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.total, size(return.businesses[..]))
