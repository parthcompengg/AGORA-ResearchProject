failed to get console mode for stdout: The handle is invalid.
/albums/{id}/tracks&getAlbumTracks&200&items&artists():::EXIT;LENGTH(return.href)==57;daikon.inv.unary.string.FixedLengthString;(return.href)
/albums/{id}/tracks&getAlbumTracks&200&items&artists():::EXIT;return.href is Url;daikon.inv.unary.string.IsUrl;(return.href)
/albums/{id}/tracks&getAlbumTracks&200&items&artists():::EXIT;LENGTH(return.id)==22;daikon.inv.unary.string.FixedLengthString;(return.id)
/albums/{id}/tracks&getAlbumTracks&200&items&artists():::EXIT;return.type == "artist";daikon.inv.unary.string.OneOfString;(return.type)
/albums/{id}/tracks&getAlbumTracks&200&items&artists():::EXIT;LENGTH(return.type)==6;daikon.inv.unary.string.FixedLengthString;(return.type)
/albums/{id}/tracks&getAlbumTracks&200&items&artists():::EXIT;LENGTH(return.uri)==37;daikon.inv.unary.string.FixedLengthString;(return.uri)
/albums/{id}/tracks&getAlbumTracks&200&items&artists():::EXIT;return.id is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.id)
/albums/{id}/tracks&getAlbumTracks&200&items&artists():::EXIT;return.type is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.type)
/albums/{id}/tracks&getAlbumTracks&200&items&artists():::EXIT;return.id is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.id, return.uri)
/albums/{id}/tracks&getAlbumTracks&200&items&artists():::EXIT;return.type is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.type, return.uri)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;return.linked_from.type == return.type;daikon.inv.binary.twoString.StringEqual;(return.linked_from.type, return.type)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;All the elements of return.available_markets[] have LENGTH=2;daikon.inv.unary.stringsequence.SequenceFixedLengthString;(return.available_markets[..])
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;return.disc_number >= 1;daikon.inv.unary.scalar.LowerBound;(return.disc_number)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;LENGTH(return.href)==56;daikon.inv.unary.string.FixedLengthString;(return.href)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;return.href is Url;daikon.inv.unary.string.IsUrl;(return.href)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;LENGTH(return.id)==22;daikon.inv.unary.string.FixedLengthString;(return.id)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;return.is_local == false;daikon.inv.unary.scalar.OneOfScalar;(return.is_local)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;LENGTH(return.linked_from.href)==56;daikon.inv.unary.string.FixedLengthString;(return.linked_from.href)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;return.linked_from.href is Url;daikon.inv.unary.string.IsUrl;(return.linked_from.href)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;LENGTH(return.linked_from.id)==22;daikon.inv.unary.string.FixedLengthString;(return.linked_from.id)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;return.linked_from.type == "track";daikon.inv.unary.string.OneOfString;(return.linked_from.type)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;LENGTH(return.linked_from.type)==5;daikon.inv.unary.string.FixedLengthString;(return.linked_from.type)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;LENGTH(return.linked_from.uri)==36;daikon.inv.unary.string.FixedLengthString;(return.linked_from.uri)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;LENGTH(return.preview_url)==107;daikon.inv.unary.string.FixedLengthString;(return.preview_url)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;return.preview_url is Url;daikon.inv.unary.string.IsUrl;(return.preview_url)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;return.restrictions.reason == "explicit";daikon.inv.unary.string.OneOfString;(return.restrictions.reason)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;LENGTH(return.restrictions.reason)==8;daikon.inv.unary.string.FixedLengthString;(return.restrictions.reason)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;return.track_number >= 1;daikon.inv.unary.scalar.LowerBound;(return.track_number)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;return.type == "track";daikon.inv.unary.string.OneOfString;(return.type)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;LENGTH(return.type)==5;daikon.inv.unary.string.FixedLengthString;(return.type)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;LENGTH(return.uri)==36;daikon.inv.unary.string.FixedLengthString;(return.uri)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;size(return.artists[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(return.artists[..]))
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;return.id is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.id)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;return.linked_from.type is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.linked_from.type)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;return.type is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.type)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;return.id is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.id, return.uri)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;return.linked_from.id is a substring of return.linked_from.href;daikon.inv.binary.twoString.StdString$SubString;(return.linked_from.href, return.linked_from.id)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;return.linked_from.type is a substring of return.linked_from.href;daikon.inv.binary.twoString.StdString$SubString;(return.linked_from.href, return.linked_from.type)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;return.type is a substring of return.linked_from.href;daikon.inv.binary.twoString.StdString$SubString;(return.linked_from.href, return.type)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;return.linked_from.id is a substring of return.linked_from.uri;daikon.inv.binary.twoString.StdString$SubString;(return.linked_from.id, return.linked_from.uri)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;return.linked_from.type is a substring of return.linked_from.uri;daikon.inv.binary.twoString.StdString$SubString;(return.linked_from.type, return.linked_from.uri)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;return.linked_from.type is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.linked_from.type, return.uri)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;return.type is a substring of return.linked_from.uri;daikon.inv.binary.twoString.StdString$SubString;(return.linked_from.uri, return.type)
/albums/{id}/tracks&getAlbumTracks&200&items():::EXIT;return.type is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.type, return.uri)
/albums/{id}/tracks&getAlbumTracks&200():::EXIT;input.limit == return.limit;daikon.inv.binary.twoScalar.IntEqual;(input.limit, return.limit)
/albums/{id}/tracks&getAlbumTracks&200():::EXIT;input.offset == return.offset;daikon.inv.binary.twoScalar.IntEqual;(input.offset, return.offset)
/albums/{id}/tracks&getAlbumTracks&200():::EXIT;return.href is Url;daikon.inv.unary.string.IsUrl;(return.href)
/albums/{id}/tracks&getAlbumTracks&200():::EXIT;return.next is Url;daikon.inv.unary.string.IsUrl;(return.next)
/albums/{id}/tracks&getAlbumTracks&200():::EXIT;return.offset >= 0;daikon.inv.unary.scalar.LowerBound;(return.offset)
/albums/{id}/tracks&getAlbumTracks&200():::EXIT;return.previous is Url;daikon.inv.unary.string.IsUrl;(return.previous)
/albums/{id}/tracks&getAlbumTracks&200():::EXIT;return.total >= 1;daikon.inv.unary.scalar.LowerBound;(return.total)
/albums/{id}/tracks&getAlbumTracks&200():::EXIT;input.id is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(input.id, return.href)
/albums/{id}/tracks&getAlbumTracks&200():::EXIT;input.id is a substring of return.next;daikon.inv.binary.twoString.StdString$SubString;(input.id, return.next)
/albums/{id}/tracks&getAlbumTracks&200():::EXIT;input.id is a substring of return.previous;daikon.inv.binary.twoString.StdString$SubString;(input.id, return.previous)
/albums/{id}/tracks&getAlbumTracks&200():::EXIT;input.limit >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.items[..]))
/albums/{id}/tracks&getAlbumTracks&200():::EXIT;input.market is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(input.market, return.href)
/albums/{id}/tracks&getAlbumTracks&200():::EXIT;input.market is a substring of return.next;daikon.inv.binary.twoString.StdString$SubString;(input.market, return.next)
/albums/{id}/tracks&getAlbumTracks&200():::EXIT;input.market is a substring of return.previous;daikon.inv.binary.twoString.StdString$SubString;(input.market, return.previous)
/albums/{id}/tracks&getAlbumTracks&200():::EXIT;return.limit >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.limit, size(return.items[..]))
/albums/{id}/tracks&getAlbumTracks&200():::EXIT;return.total >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.total, size(return.items[..]))
